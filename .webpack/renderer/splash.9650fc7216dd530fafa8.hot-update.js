"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdateprojet_kathara"]("splash",{

/***/ "./src/lib/ImportConf.ts":
/*!*******************************!*\
  !*** ./src/lib/ImportConf.ts ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar RegexConst = __importStar(__webpack_require__(/*! ./RegexConst */ \"./src/lib/RegexConst.ts\"));\nvar Device_1 = __webpack_require__(/*! ../model/Device */ \"./src/model/Device.tsx\");\nvar ImportConf = /** @class */ (function () {\n    function ImportConf() {\n    }\n    ImportConf.prototype.importGlobalLabConf = function (lab, line) {\n        var _a;\n        var isLabConf = false;\n        this.getLabConf(lab, line) ? isLabConf = true : isLabConf;\n        if (isLabConf !== true) {\n            var deviceName_1 = (_a = Array.from(line.matchAll(RegexConst.LAB_DEVICE_NAME_REGEX))[0]) === null || _a === void 0 ? void 0 : _a.groups.deviceName.toUpperCase();\n            if (deviceName_1) {\n                var device = lab.devices.find(function (device) { return device.deviceName.toUpperCase() == deviceName_1; });\n                if (!device) {\n                    device = { deviceName: deviceName_1, type: Device_1.DeviceType.PC };\n                    lab.devices.push(device);\n                }\n                this.getOptionalLabDeviceConf(device, line);\n            }\n        }\n        return lab;\n    };\n    ImportConf.prototype.importGlobalDevicesConf = function (device, line) {\n        var _a, _b, _c, _d;\n        var interfaceName = (_d = (_b = (_a = Array.from(line.matchAll(RegexConst.LAB_DEVICE_INTERFACE_NAME_FROM_IP_ADD))[0]) === null || _a === void 0 ? void 0 : _a.filter(function (interfaceName) { return interfaceName != undefined; })[1]) !== null && _b !== void 0 ? _b : (_c = Array.from(line.matchAll(RegexConst.LAB_DEVICE_INTERFACE_NAME_AND_IP_IS_UP_REGEX))[0]) === null || _c === void 0 ? void 0 : _c.filter(function (interfaceName) { return interfaceName != undefined; })[1]) !== null && _d !== void 0 ? _d : undefined;\n        if (interfaceName) {\n            if (!device.interfaces) {\n                device.interfaces = [];\n            }\n            var itf = device.interfaces.find(function (itf) { return itf.interfaceName == interfaceName; });\n            if (!itf) {\n                itf = { cidr: 0, collision_domain: \"\", interfaceName: interfaceName, ip: \"\", is_up: false };\n                device.interfaces.push(itf);\n            }\n            this.getDeviceInterfacesConf(itf, device, line);\n        }\n        else {\n            if (!device.startups_commands) {\n                device.startups_commands = [];\n            }\n            device.startups_commands.push(line);\n        }\n    };\n    ImportConf.prototype.getLabConf = function (lab, line) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n        if ((_a = Array.from(line.matchAll(RegexConst.LAB_NAME_REGEX))[0]) === null || _a === void 0 ? void 0 : _a.groups.name) {\n            lab.labName = (_b = Array.from(line.matchAll(RegexConst.LAB_NAME_REGEX))[0].groups.name) === null || _b === void 0 ? void 0 : _b.replace(/['\"]/g, '').toString();\n        }\n        else if ((_c = Array.from(line.matchAll(RegexConst.LAB_DESCRIPTION_REGEX))[0]) === null || _c === void 0 ? void 0 : _c.groups.description) {\n            lab.description = (_d = Array.from(line.matchAll(RegexConst.LAB_DESCRIPTION_REGEX))[0].groups.description) === null || _d === void 0 ? void 0 : _d.replace(/['\"]/g, '').toString();\n        }\n        else if ((_e = Array.from(line.matchAll(RegexConst.LAB_AUTHOR_REGEX))[0]) === null || _e === void 0 ? void 0 : _e.groups.author) {\n            lab.author = (_f = Array.from(line.matchAll(RegexConst.LAB_AUTHOR_REGEX))[0].groups.author) === null || _f === void 0 ? void 0 : _f.replace(/['\"]/g, '').toString();\n        }\n        else if ((_g = Array.from(line.matchAll(RegexConst.LAB_EMAIL_REGEX))[0]) === null || _g === void 0 ? void 0 : _g.groups.email) {\n            lab.email = (_h = Array.from(line.matchAll(RegexConst.LAB_EMAIL_REGEX))[0].groups.email) === null || _h === void 0 ? void 0 : _h.replace(/['\"]/g, '').toString();\n        }\n        else if ((_j = Array.from(line.matchAll(RegexConst.LAB_WEB_REGEX))[0]) === null || _j === void 0 ? void 0 : _j.groups.web) {\n            lab.web = (_k = Array.from(line.matchAll(RegexConst.LAB_WEB_REGEX))[0].groups.web) === null || _k === void 0 ? void 0 : _k.replace(/['\"]/g, '').toString();\n        }\n        else if ((_l = Array.from(line.matchAll(RegexConst.LAB_VERSION_REGEX))[0]) === null || _l === void 0 ? void 0 : _l.groups.version) {\n            lab.version = (_m = Array.from(line.matchAll(RegexConst.LAB_VERSION_REGEX))[0].groups.version) === null || _m === void 0 ? void 0 : _m.replace(/['\"]/g, '').toString();\n        }\n        else {\n            return false;\n        }\n    };\n    ImportConf.prototype.getOptionalLabDeviceConf = function (device, line) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3;\n        if (!device.optional_parameters) {\n            device.optional_parameters = {};\n        }\n        if ((_a = Array.from(line.matchAll(RegexConst.LAB_DEVICE_IMAGE_REGEX))[0]) === null || _a === void 0 ? void 0 : _a.groups.image) {\n            device.optional_parameters.image = (_b = Array.from(line.matchAll(RegexConst.LAB_DEVICE_IMAGE_REGEX))[0].groups.image) === null || _b === void 0 ? void 0 : _b.replace(/['\"]/g, '').toString();\n        }\n        else if ((_c = Array.from(line.matchAll(RegexConst.LAB_DEVICE_MEMORY_REGEX))[0]) === null || _c === void 0 ? void 0 : _c.groups.memory) {\n            device.optional_parameters.memory = (_d = Array.from(line.matchAll(RegexConst.LAB_DEVICE_MEMORY_REGEX))[0].groups.memory) === null || _d === void 0 ? void 0 : _d.replace(/['\"]/g, '').toString();\n        }\n        else if ((_e = Array.from(line.matchAll(RegexConst.LAB_DEVICE_CPUS_REGEX))[0]) === null || _e === void 0 ? void 0 : _e.groups.cpus) {\n            device.optional_parameters.cpus = (_f = Array.from(line.matchAll(RegexConst.LAB_DEVICE_CPUS_REGEX))[0].groups.cpus) === null || _f === void 0 ? void 0 : _f.replace(/['\"]/g, '').toString();\n        }\n        else if ((_g = Array.from(line.matchAll(RegexConst.LAB_DEVICE_PORT_REGEX))[0]) === null || _g === void 0 ? void 0 : _g.groups.port) {\n            device.optional_parameters.port = (_h = Array.from(line.matchAll(RegexConst.LAB_DEVICE_PORT_REGEX))[0].groups.port) === null || _h === void 0 ? void 0 : _h.replace(/['\"]/g, '').toString();\n        }\n        else if ((_j = Array.from(line.matchAll(RegexConst.LAB_DEVICE_BRIDGED_REGEX))[0]) === null || _j === void 0 ? void 0 : _j.groups.bridged) {\n            var isBridged = (_k = Array.from(line.matchAll(RegexConst.LAB_DEVICE_BRIDGED_REGEX))[0].groups.bridged) === null || _k === void 0 ? void 0 : _k.replace(/['\"]/g, '').toString();\n            if (isBridged === 'true' || isBridged === '1') {\n                device.optional_parameters.bridged = true;\n            }\n            device.optional_parameters.bridged = false;\n        }\n        else if ((_l = Array.from(line.matchAll(RegexConst.LAB_DEVICE_IPV6_REGEX))[0]) === null || _l === void 0 ? void 0 : _l.groups.ipv6) {\n            var isIpv6 = (_m = Array.from(line.matchAll(RegexConst.LAB_DEVICE_IPV6_REGEX))[0].groups.ipv6) === null || _m === void 0 ? void 0 : _m.replace(/['\"]/g, '').toString();\n            if (isIpv6 === 'true' || isIpv6 === '1') {\n                device.optional_parameters.ipv6 = true;\n            }\n            device.optional_parameters.ipv6 = false;\n        }\n        else if ((_o = Array.from(line.matchAll(RegexConst.LAB_DEVICE_EXEC_REGEX))[0]) === null || _o === void 0 ? void 0 : _o.groups.exec) {\n            device.optional_parameters.exec = (_p = Array.from(line.matchAll(RegexConst.LAB_DEVICE_EXEC_REGEX))[0].groups.exec) === null || _p === void 0 ? void 0 : _p.replace(/['\"]/g, '').toString();\n        }\n        else if ((_q = Array.from(line.matchAll(RegexConst.LAB_DEVICE_SYSCTL_REGEX))[0]) === null || _q === void 0 ? void 0 : _q.groups.sysctl) {\n            var ipv4Forward = '/proc/sys/net/ipv4/ip_forward=1';\n            var ipv6Forward = '/proc/sys/net/ipv6/conf/all/forwarding=1';\n            var systcl = (_r = Array.from(line.matchAll(RegexConst.LAB_DEVICE_SYSCTL_REGEX))[0].groups.sysctl) === null || _r === void 0 ? void 0 : _r.replace(/['\"]/g, '').toString();\n            device.optional_parameters.sysctl = systcl;\n            if (systcl == ipv4Forward || systcl == ipv6Forward) {\n                device.type = Device_1.DeviceType.Router;\n            }\n        }\n        else if ((_s = Array.from(line.matchAll(RegexConst.LAB_DEVICE_ENV_REGEX))[0]) === null || _s === void 0 ? void 0 : _s.groups.env) {\n            device.optional_parameters.env = (_t = Array.from(line.matchAll(RegexConst.LAB_DEVICE_ENV_REGEX))[0].groups.env) === null || _t === void 0 ? void 0 : _t.replace(/['\"]/g, '').toString();\n        }\n        else if ((_u = Array.from(line.matchAll(RegexConst.LAB_DEVICE_SHELL_REGEX))[0]) === null || _u === void 0 ? void 0 : _u.groups.shell) {\n            device.optional_parameters.shell = (_v = Array.from(line.matchAll(RegexConst.LAB_DEVICE_SHELL_REGEX))[0].groups.shell) === null || _v === void 0 ? void 0 : _v.replace(/['\"]/g, '').toString();\n        }\n        else if ((_w = Array.from(line.matchAll(RegexConst.LAB_DEVICE_NUM_TERMS_REGEX))[0]) === null || _w === void 0 ? void 0 : _w.groups.num_terms) {\n            console.log(\"feuur\");\n            device.optional_parameters.num_terms = Number((_x = Array.from(line.matchAll(RegexConst.LAB_DEVICE_NUM_TERMS_REGEX))[0].groups.num_terms) === null || _x === void 0 ? void 0 : _x.replace(/['\"]/g, ''));\n        }\n        else if ((_y = Array.from(line.matchAll(RegexConst.LAB_DEVICE_INTERFACE_NAME_REGEX))[0]) === null || _y === void 0 ? void 0 : _y.groups.interfaceName) {\n            var interfaceName_1 = (_0 = (_z = Array.from(line.matchAll(RegexConst.LAB_DEVICE_INTERFACE_NAME_REGEX))[0]) === null || _z === void 0 ? void 0 : _z.groups.interfaceName) === null || _0 === void 0 ? void 0 : _0.replace(/['\"]/g, '').toString();\n            if (interfaceName_1) {\n                if (!device.interfaces) {\n                    device.interfaces = [];\n                }\n                var itf = device.interfaces.find(function (itf) { return itf.interfaceName == interfaceName_1; });\n                if (!itf) {\n                    itf = { cidr: 0, collision_domain: \"\", ip: \"\", is_up: false, interfaceName: interfaceName_1 };\n                    device.interfaces.push(itf);\n                }\n                if ((_1 = Array.from(line.matchAll(RegexConst.LAB_DEVICE_INTERFACE_COLLISION_DOMAIN_REGEX))[0]) === null || _1 === void 0 ? void 0 : _1.groups.collision_domain) {\n                    itf.collision_domain = (_3 = (_2 = Array.from(line.matchAll(RegexConst.LAB_DEVICE_INTERFACE_COLLISION_DOMAIN_REGEX))[0]) === null || _2 === void 0 ? void 0 : _2.groups.collision_domain) === null || _3 === void 0 ? void 0 : _3.replace(/['\"]/g, '').toString();\n                }\n            }\n        }\n    };\n    ImportConf.prototype.getDeviceInterfacesConf = function (itf, device, line) {\n        var _a, _b;\n        var hasMatched = false;\n        if (Array.from(line.matchAll(RegexConst.LAB_DEVICE_INTERFACE_NAME_AND_IP_IS_UP_REGEX))[0]) {\n            itf.is_up = true;\n            hasMatched = true;\n        }\n        if (Array.from(line.matchAll(RegexConst.LAB_DEVICE_INTERFACE_IP_REGEX))[0]) {\n            hasMatched = true;\n            itf.ip = (_a = Array.from(line.matchAll(RegexConst.LAB_DEVICE_INTERFACE_IP_REGEX))[0]) === null || _a === void 0 ? void 0 : _a.filter(function (ip) {\n                return ip != undefined;\n            })[1];\n        }\n        if (Array.from(line.matchAll(RegexConst.LAB_DEVICE_INTERFACE_CIDR_REGEX))[0]) {\n            hasMatched = true;\n            var cidr = (_b = Array.from(line.matchAll(RegexConst.LAB_DEVICE_INTERFACE_CIDR_REGEX))[0]) === null || _b === void 0 ? void 0 : _b.filter(function (cidr) { return cidr != undefined; })[1];\n            itf.cidr = Number(cidr);\n        }\n        if (hasMatched === false) {\n            if (!device.startups_commands) {\n                device.startups_commands = [];\n            }\n            device.startups_commands.push(line);\n        }\n    };\n    return ImportConf;\n}());\nexports[\"default\"] = ImportConf;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lib/ImportConf.ts\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("c0cb74c618ae2b4a1319")
/******/ })();
/******/ 
/******/ }
);