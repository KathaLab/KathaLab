{"version":3,"file":"preload.js","mappings":"89CAGA,aAEA,EAAAA,cAAcC,kBAAkB,cAAe,CAC3CC,WAAY,gF,uBAAY,SAAM,EAAAC,YAAYC,OAAO,qB,OAAzB,mB,QACxBC,gBAAiB,gF,uBAAY,SAAM,EAAAF,YAAYC,OAAO,0B,OAAzB,mB,QAC7BE,SAAU,SAAOC,GAAS,qE,uBAAK,SAAM,EAAAJ,YAAYC,OAAO,YAAaG,I,OAAtC,mB,QAC/BC,SAAU,SAAOC,GAAa,qE,uBAAK,SAAM,EAAAN,YAAYC,OAAO,YAAaK,I,OAAtC,mB,QAEnCC,cAAe,SAAOC,GAAkB,qE,uBAAM,SAAM,EAAAR,YAAYC,OAAO,oBAAqBO,I,OAA9C,mB,QAC9CC,SAAW,SAAOC,EAAeC,EAAeC,GAAY,qE,uBAAK,SAAM,EAAAZ,YAAYC,OAAO,eAAgBS,EAAUC,EAAUC,I,OAA7D,mB,QACjEC,WAAY,SAAOC,GAAO,qE,uBAAK,SAAM,EAAAd,YAAYC,OAAO,cAAea,I,OAAxC,mB,QAE/BC,SAAU,gF,uBAAY,SAAM,EAAAf,YAAYC,OAAO,oB,OAAzB,mB,QACtBe,SAAU,gF,uBAAY,SAAM,EAAAhB,YAAYC,OAAO,oB,OAAzB,mB,QACtBgB,MAAO,gF,uBAAY,SAAM,EAAAjB,YAAYC,OAAO,iB,OAAzB,mB,QAEnBiB,eAAgB,SAACC,GACb,EAAAnB,YAAYoB,mBAAmBD,EACnC,EAEAE,QAAS,SAACF,EAAcG,GACpB,EAAAtB,YAAYuB,GAAGJ,EAASG,EAC5B,G,UCzBJE,EAAOC,QAAUC,QAAQ,W,GCCrBC,EAA2B,CAAC,GAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUI,KAAKT,EAAOC,QAASD,EAAQA,EAAOC,QAASG,GAGpEJ,EAAOC,OACf,CCnB0BG,CAAoB,I","sources":["webpack://projet-kathara/./src/preload.ts","webpack://projet-kathara/external node-commonjs \"electron\"","webpack://projet-kathara/webpack/bootstrap","webpack://projet-kathara/webpack/startup"],"sourcesContent":["// // See the Electron documentation for details on how to use preload scripts:\r\n// // https://www.electronjs.org/docs/latest/tutorial/process-model#preload-scripts\r\n\r\nimport { contextBridge, ipcRenderer } from 'electron';\r\n\r\ncontextBridge.exposeInMainWorld('electronAPI', {\r\n    chooseFile: async () => await ipcRenderer.invoke('dialog:open-file'),\r\n    chooseDirectory: async () => await ipcRenderer.invoke('dialog:open-directory'),\r\n    saveData: async (data: any) => await ipcRenderer.invoke('save:save', data),\r\n    loadSave: async (filename: any) => await ipcRenderer.invoke('save:load', filename),\r\n\r\n    readDirectory: async (directoryPath: any)  => await ipcRenderer.invoke('fs:read-directory', directoryPath),\r\n    saveFile : async (filePath: any, fileName: any, content: any) => await ipcRenderer.invoke('fs:save-file', filePath, fileName, content),\r\n    deleteSave: async (id: any) => await ipcRenderer.invoke('save:delete', id),\r\n\r\n    maximize: async () => await ipcRenderer.invoke('window:maximize'),\r\n    minimize: async () => await ipcRenderer.invoke('window:minimize'),\r\n    close: async () => await ipcRenderer.invoke('window:close'),\r\n\r\n    removeListener: (channel: any) => {\r\n        ipcRenderer.removeAllListeners(channel)\r\n    },\r\n\r\n    receive: (channel: any, func: any) => {\r\n        ipcRenderer.on(channel, func);\r\n    }\r\n})","module.exports = require(\"electron\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(465);\n"],"names":["contextBridge","exposeInMainWorld","chooseFile","ipcRenderer","invoke","chooseDirectory","saveData","data","loadSave","filename","readDirectory","directoryPath","saveFile","filePath","fileName","content","deleteSave","id","maximize","minimize","close","removeListener","channel","removeAllListeners","receive","func","on","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}