import { app, BrowserWindow, ipcMain } from 'electron';
import { electronAPI } from './electronAPI';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const SPLASH_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string
// const PRELOAD_PATH = path.join(app.getAppPath() + "/src/preload.js");

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

let loader = false

const createWindow = (): void => {

  const display = () => {
    splash.destroy();
    mainWindow.maximize();
    mainWindow.show();
  }

  setTimeout(() => {
    if(loader) display()
    loader = true;
  }, 10000)

  // create a new `splash`-Window
  const splash = new BrowserWindow({ width: 810, height: 610, transparent: true, frame: false, alwaysOnTop: true });
  splash.loadURL(SPLASH_WEBPACK_ENTRY);

  // Create the browser window.
  const mainWindow = new BrowserWindow({
    frame: false,
    show: false,
    webPreferences: {
      contextIsolation: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });
  // and load the index.html of the app.
  // if main window is ready to show, then destroy the splash window and show up the main window
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  mainWindow.webContents.openDevTools();

  mainWindow.once('ready-to-show', () => {
    if(loader) display()
    loader = true;
  });


  ipcMain.handle("window:close", async () => {
    mainWindow.close();
  })
  ipcMain.handle("window:maximize", async () => {
    mainWindow.isMaximized() ? mainWindow.unmaximize() : mainWindow.maximize();
  })
  ipcMain.handle("window:minimize", async () => {
    mainWindow.minimize();
  })
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

const electron = new electronAPI();
electron.initialize();
